{"version":3,"sources":["Auth.js","Header.js","Login.js","Logout.js","Context.js","Profile.js","Card.js","Trade.js","Request.js","SearchFriend.js","MakeTrade.js","Forbidden.js","PrivateRoute.js","Register.js","App.js","serviceWorker.js","index.js","Config.js"],"names":["signIn","name","password","console","log","sessionStorage","setItem","getAuth","getItem","isAuthenticated","Header","loggedInUser","isAuth","to","style","marginRight","i","SERVERURL","require","withRouter","props","useState","setName","setPassword","LoginUser","base64","headers","Headers","append","encode","url","fetch","method","response","json","error","alert","history","push","action","id","onSubmit","event","preventDefault","htmlFor","type","onChange","target","value","SignOut","className","onClick","GlobalStateContext","React","createContext","GlobalStateProvider","player1","setPlayer1","player2","setPlayer2","player1cards","setPlayer1cards","player2cards","setPlayer2cards","player1cardsselected","setPlayer1cardsselected","store","get","set","player2cardsselected","Provider","children","profile","setProfile","useParams","username","context","useContext","redirectToProfile","e","fetchProfile","ok","Error","statusText","cards","useEffect","map","card","index","pathname","state","profilename","key","trades","trade","_id","friends","friend","requests","req","proposer","receiver","user","width","height","location","setCard","cardname","fetchCard","Object","keys","property","setTrade","fetchTrade","acceptTrade","rejectTrade","msg","cardindex","length","request","setRequest","fetchRequest","acceptFriendRequest","body","JSON","stringify","rejectFriendRequest","setValue","profiles","setProfiles","suggestions","setSuggestions","useHistory","fetchFriends","prof","filter","sendFriendRequest","inputProps","placeholder","newValue","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","slice","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","setPlayer2cardsselected","player1cardindexselected","setPlayer1cardindexselected","player2cardindexselected","setPlayer2cardindexselected","makeTrade","display","float","checked","includes","newarray","newindexarray","indexOf","splice","Player1CardChecked","Player2CardChecked","marginTop","Forbidden","PrivateRoute","render","options","LastComponent","RegisterUser","for","App","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","config","module","exports"],"mappings":"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","file":"static/js/main.125f2abc.chunk.js","sourcesContent":["const signIn = (name, password) => {\r\n  console.log(\"signIn\");\r\n  sessionStorage.setItem(\"name\", name);\r\n\r\n  sessionStorage.setItem(\"password\", password);\r\n  sessionStorage.setItem(\"isAuthenticated\", true);\r\n};\r\n\r\nconst getAuth = () => {\r\n  return {\r\n    name: sessionStorage.getItem(\"name\"),\r\n    password: sessionStorage.getItem(\"password\"),\r\n    // sessionStorage.getItem(\"isAuthenticated\") returns  a string ie \"true\", so we have to manually set it to true or false\r\n    isAuthenticated:\r\n      sessionStorage.getItem(\"isAuthenticated\") == \"true\" ? true : false,\r\n  };\r\n};\r\n\r\nconst signOut = () => {\r\n  alert(\"sign out\");\r\n  sessionStorage.setItem(\"name\", \"\");\r\n  sessionStorage.setItem(\"password\", \"\");\r\n  sessionStorage.setItem(\"isAuthenticated\", false);\r\n};\r\n\r\nexport { signIn, signOut, getAuth };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getAuth } from \"./Auth\";\r\nimport \"./App.css\";\r\n\r\nfunction Header() {\r\n  const loggedInUser = getAuth().name;\r\n  const isAuth = getAuth().isAuthenticated;\r\n  console.log(isAuth);\r\n  console.log(isAuth);\r\n  return (\r\n    <>\r\n      <nav>\r\n        {isAuth && <span> Welcome {loggedInUser} ! </span>}\r\n        <br />\r\n        {!isAuth && (\r\n          <Link to=\"/login\" style={{ marginRight: \"20px\" }}>\r\n            Sign In\r\n          </Link>\r\n        )}\r\n\r\n        {isAuth && (\r\n          <Link to=\"/logout\" style={{ marginRight: \"20px\" }}>\r\n            Sign Out\r\n          </Link>\r\n        )}\r\n\r\n        {!isAuth && (\r\n          <Link to=\"/register\" style={{ marginRight: \"20px\" }}>\r\n            Sign Up\r\n          </Link>\r\n        )}\r\n\r\n        {isAuth && (\r\n          <Link to={\"/profile/\" + loggedInUser} style={{ marginRight: \"20px\" }}>\r\n            Profile\r\n          </Link>\r\n        )}\r\n      </nav>\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { signIn } from \"./Auth\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst Login = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // function which fetches the user from the db,\r\n  // if the name and password match up, forward to the profile\r\n  const LoginUser = async () => {\r\n    try {\r\n      let base64 = require(\"base-64\");\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      headers.append(\r\n        \"Authorization\",\r\n        \"Basic \" + base64.encode(name + \":\" + password)\r\n      );\r\n\r\n      const url = `${SERVERURL}/user/${name}`;\r\n\r\n      const response = await fetch(url, {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      });\r\n\r\n      console.log(response);\r\n\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        alert(json.error);\r\n        return;\r\n      }\r\n      signIn(name, password);\r\n      props.history.push(\"/profile/\" + name);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    LoginUser();\r\n  };\r\n\r\n  const OnNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const OnPasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <form\r\n        action=\"/login\"\r\n        method=\"POST\"\r\n        id=\"loginForm\"\r\n        onSubmit={mySubmitHandler}\r\n        name={name}\r\n      >\r\n        <label htmlFor=\"username\">username:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          name=\"username\"\r\n          onChange={OnNameChange}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"password\">password:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          id=\"password\"\r\n          name=\"password\"\r\n          onChange={OnPasswordChange}\r\n        />\r\n        <br />\r\n        <br />\r\n        <input type=\"submit\" value=\"Log in\" />\r\n        <br />\r\n      </form>\r\n      <p>\r\n        not a user?\r\n        <Link to=\"/register\" style={{ marginRight: \"20px\" }}>\r\n          Register Here\r\n        </Link>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Login);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { signOut } from \"./Auth\";\r\nimport { withRouter } from \"react-router\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nfunction Logout(props) {\r\n  const SignOut = () => {\r\n    signOut();\r\n    props.history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bounds\">\r\n        <h1>Log Out</h1>\r\n        <p>Are u sure you want to log out? </p>\r\n        <button className=\"button\" type=\"button\" onClick={() => SignOut()}>\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(Logout);\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { getAuth } from \"./Auth\";\r\n\r\nexport const GlobalStateContext = React.createContext();\r\n\r\n/* GlobalStateProvider :\r\n a component used to persist the authenticated user information in a global state-full component.\r\n*/\r\nconst GlobalStateProvider = (props) => {\r\n  const [player1, setPlayer1] = useState(getAuth().name); //player1: the person who initiates the trade\r\n  const [player2, setPlayer2] = useState(\"\"); // player2: the person accepting or rejecting the trade\r\n\r\n  const [player1cards, setPlayer1cards] = useState([]); // player1cards: all initial cards for player1\r\n  const [player2cards, setPlayer2cards] = useState([]); // player2cards: all initial cards for player2\r\n\r\n  const [player1cardsselected, setPlayer1cardsselected] = useState([]); // player1cardsselected: all cards selected for trade by player1\r\n  const [player2cardsselected, setPlayer2cardsselected] = useState([]); // player2cardsselected: all cards selected for trade by player2\r\n\r\n  const store = {\r\n    player1: { get: player1, set: setPlayer1 },\r\n    player2: { get: player2, set: setPlayer2 },\r\n    player1cards: { get: player1cards, set: setPlayer1cards },\r\n    player2cards: { get: player2cards, set: setPlayer2cards },\r\n    player1cardsselected: {\r\n      get: player1cardsselected,\r\n      set: setPlayer1cardsselected,\r\n    },\r\n    player2cardsselected: {\r\n      get: player2cardsselected,\r\n      set: setPlayer2cardsselected,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <GlobalStateContext.Provider value={store}>\r\n      {props.children}\r\n    </GlobalStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalStateProvider;\r\n","import React, { useState, useEffect, useContext, Fragment } from \"react\";\r\nimport { getAuth } from \"./Auth\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { GlobalStateContext } from \"./Context\";\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst Profile = (props) => {\r\n  console.log(props);\r\n  const [profile, setProfile] = useState();\r\n  const { name } = useParams(); // extra variable to fetch the profile from the link that was clicked on ie if I clickd on Bob's Link, fetch his profile\r\n  const username = getAuth().name; // username: the name of the person who logged in\r\n  const context = useContext(GlobalStateContext);\r\n\r\n  // cannot put this code here: it will cause a warning, cannot set variables while rendering,\r\n  // this code belongs in the useEffect\r\n  // if the link that I clicked on is John (name), and I am logged in as John (username)\r\n  // if (name === username) {\r\n  //   console.log(\"player1\");\r\n  //   context.player1.set(username); // set name for player1\r\n  // } else {\r\n  //   console.log(\"player2\");\r\n  //   context.player2.set(name); // set name for player2\r\n  // }\r\n\r\n  const redirectToProfile = (e) => {\r\n    props.history.push(\"/profile/\" + e.target.id); // redirect to friend's profile\r\n  };\r\n\r\n  const searchFriends = (e) => {\r\n    props.history.push(\"/search/\", { user: username }); // redirect to friend's profile and pass extra data the username to the button\r\n    //window.location.reload(false); // refresh page to get the updated information\r\n  };\r\n\r\n  const fetchProfile = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVERURL}/profile/${name}`);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      const json = await response.json();\r\n      setProfile(json.profile);\r\n      //set the player1cards to the context, notice we have to use json.profile and not the state variable profile\r\n      // because setProfile is an asynchronous function and takes time to process\r\n      // if the link that I clicked on is John (name), and I am logged in as John (username)\r\n      if (name === username) {\r\n        console.log(\"player1cards\");\r\n        context.player1cards.set(json.profile.cards); // set the player1cards context\r\n      } else {\r\n        console.log(\"player2cards\");\r\n        context.player2cards.set(json.profile.cards); // else set player2cards context\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // useEffect gets called after rendering depending on what I have provided as [name]\r\n  useEffect(() => {\r\n    console.log(\"useffect\", name);\r\n    if (name === username) {\r\n      console.log(\"player1\");\r\n      context.player1.set(username); // set name for player1\r\n    } else {\r\n      console.log(\"player2\");\r\n      context.player2.set(name); // set name for player2\r\n    }\r\n    fetchProfile(); // eslint-disable-next-line\r\n  }, [name]); // refresh based on name, if I change the profile name, refresh\r\n  return (\r\n    <>\r\n      <Header />\r\n      <br></br>\r\n      <hr></hr>\r\n      {\"Cards\"} <br></br>\r\n      {profile &&\r\n        profile.cards.map((card, index) => (\r\n          <Link\r\n            to={{\r\n              pathname: `/card/${card.name}`,\r\n              state: { profilename: name },\r\n            }}\r\n            key={index}\r\n          >\r\n            {\" \"}\r\n            {card.name}\r\n            <br></br>\r\n          </Link>\r\n        ))}\r\n      {profile && username === profile.name && (\r\n        <Fragment>\r\n          <br></br>\r\n          <hr></hr>\r\n          {\"Trades\"} <br></br>\r\n        </Fragment>\r\n      )}\r\n      {profile &&\r\n        username === profile.name &&\r\n        profile.trades.map((trade, index) => (\r\n          <Link\r\n            to={{\r\n              pathname: `/trade/${trade._id}`,\r\n              state: { profilename: name },\r\n            }}\r\n            key={index}\r\n          >\r\n            {\" \"}\r\n            {trade._id}\r\n            <br></br>\r\n          </Link>\r\n        ))}\r\n      {profile && username === profile.name && (\r\n        <Fragment>\r\n          <br></br>\r\n          <hr></hr>\r\n          {\"Friends\"} <br></br>\r\n        </Fragment>\r\n      )}\r\n      {profile &&\r\n        username === profile.name &&\r\n        profile.friends.map((friend, index) => (\r\n          <Link\r\n            to={{\r\n              pathname: `/profile/${friend}`,\r\n              state: { profilename: name },\r\n            }}\r\n            key={index}\r\n            onClick={redirectToProfile}\r\n            value={friend}\r\n            id={friend}\r\n          >\r\n            {friend}\r\n            <br></br>\r\n          </Link>\r\n        ))}\r\n      {profile && username === profile.name && (\r\n        <Fragment>\r\n          <br></br>\r\n          <hr></hr>\r\n          {\"Friend Requests\"} <br></br>\r\n        </Fragment>\r\n      )}\r\n      {profile &&\r\n        username === profile.name &&\r\n        profile.requests.map((req, index) => (\r\n          <Link\r\n            to={{\r\n              pathname: `/request/${req._id}`,\r\n              state: { profilename: name },\r\n            }}\r\n            key={index}\r\n          >\r\n            {\" \"}\r\n            {/*if I am the proposer , only display to ,\r\n             *if I am the receiver , only display from,*/}\r\n            {name === req.proposer ? `to ${req.receiver}` : \"\"}\r\n            {name === req.receiver ? `from ${req.proposer}` : \"\"}\r\n            <br></br>\r\n          </Link>\r\n        ))}\r\n      <br></br>\r\n      <hr></hr>\r\n      {/*if I am logged in as John and I am viewing my own profile, then display the Add New Friend Button*/}\r\n      {profile && username === profile.name && (\r\n        <Fragment>\r\n          <button\r\n            onClick={searchFriends}\r\n            style={{ width: \"50%\", height: \"30px\" }}\r\n          >\r\n            Add New Friend\r\n          </button>\r\n          <br></br>\r\n          <hr></hr>\r\n        </Fragment>\r\n      )}\r\n      {/*if I am logged in as John and I am viewing my some other player's profile, then display make trade button*/}\r\n      {profile && username !== profile.name && (\r\n        <Link to={`/maketrade/${profile.name}`}>make trade</Link>\r\n      )}\r\n      <br></br>\r\n      <hr></hr>\r\n      {/*if I am logged in as John and I am viewing my some other player's profile, then display Return to your propfile*/}\r\n      {profile && username !== profile.name && (\r\n        <Link to={`/profile/${username}`}>Return to your profile</Link>\r\n      )}\r\n      {/* <br></br> // optional divs for testing context ie store\r\n      the key={index} belongs to the parent component should be put inside Fragment ie\r\n      <Fragment key={index}> because it is the parent component, otherwise we would get a warning message \r\n      <hr></hr>\r\n      {\"player1cards\"}\r\n      {context.player1cards.get &&\r\n        context.player1cards.get.map((card, index) => (\r\n          <Fragment>\r\n            {\" \"}\r\n            <div key={index}>{card.name}</div>\r\n          </Fragment>\r\n        ))}\r\n      <br></br>\r\n      <hr></hr>\r\n      {\"player2cards\"}\r\n      {context.player2cards.get &&\r\n        context.player2cards.get.map((card, index) => (\r\n          <Fragment>\r\n            {\" \"}\r\n            <div key={index}>{card.name}</div>\r\n          </Fragment>\r\n        ))} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Profile);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\"; // to access the profilename that is being passed\r\n// via the link from Profile.js via state\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst Card = (props) => {\r\n  console.log(props);\r\n  console.log(props.location.state);\r\n  const [card, setCard] = useState();\r\n  const [username] = useState(props.location.state.profilename);\r\n  //setUsername(props.location.state.profilename);\r\n  let { cardname } = useParams(); //cardname\r\n\r\n  const fetchCard = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVERURL}/card/${cardname}`);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      setCard(json.card);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCard(); // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/*list out all the properties and their values for each card such as name, artist. some \r\ncards have additional properties such as Spellpower and other cards don't. we make use of the \r\nthe built in libraries Object.keys to take care of it*/}\r\n      {card &&\r\n        Object.keys(card).map((property, index) => (\r\n          <span key={index}>\r\n            {property} : {card[property]}\r\n            <br></br>\r\n          </span>\r\n        ))}\r\n      <Link to={`/profile/${username}`}>return to profile </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Card);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\n//import { getAuth } from \"./Auth\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\"; // to access the profilename that is being passed\r\n// via the link from Profile.js via state\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst Trade = (props) => {\r\n  console.log(props);\r\n  console.log(props.location.state);\r\n  const [trade, setTrade] = useState();\r\n  const [username] = useState(props.location.state.profilename);\r\n  //setUsername(props.location.state.profilename);\r\n  let { _id } = useParams(); //trade id\r\n\r\n  const fetchTrade = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVERURL}/trade/${_id}`);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      setTrade(json.trade);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const acceptTrade = async () => {\r\n    try {\r\n      // let headers = new Headers();\r\n      // headers.append(\"Content-Type\", \"application/json\");\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/accepttrade/${_id}`, {\r\n        method: \"GET\",\r\n        //headers: headers,\r\n        //body: JSON.stringify({}),\r\n      });\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        //if error message exists, meaning players are already friends,display error message\r\n        alert(json.error);\r\n      } else alert(\"trade accepted !\");\r\n      props.history.push(\"/profile/\" + username);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const rejectTrade = async () => {\r\n    try {\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/rejecttrade/${_id}`, {\r\n        method: \"DELETE\",\r\n        headers: headers,\r\n      });\r\n      const json = await response.json();\r\n      if (json.msg) {\r\n        alert(json.msg); // send alert message from backend\r\n      }\r\n      props.history.push(\"/profile/\" + username);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTrade(); // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/*conditional rendering: jsx renders before the fetch api completes, so \r\n        we have to tell react to render only this, after the fetch api completes by adding the condition\r\n        that the state variable trade exists*/}\r\n      {trade && (\r\n        <div>\r\n          <span>\r\n            {\"player1\"} : {trade.player1}\r\n          </span>\r\n          <br></br>\r\n          <span>\r\n            {\"player2\"} : {trade.player2}\r\n          </span>{\" \"}\r\n          <br></br>\r\n          <span>\r\n            {\"player1cards\"} :{\" \"}\r\n            {trade[\"player1cards\"].map((card, cardindex) => (\r\n              <Link\r\n                to={{\r\n                  pathname: `/card/${card.name}`,\r\n                  state: { profilename: username },\r\n                }}\r\n                key={cardindex}\r\n              >\r\n                {\" \"}\r\n                {card.name}\r\n                {cardindex < trade[\"player1cards\"].length - 1 && \",\"}{\" \"}\r\n                {/*conditional rendering for comma*/}\r\n              </Link>\r\n            ))}{\" \"}\r\n          </span>\r\n          <br></br>\r\n          <span>\r\n            {\"player2cards\"} :{\" \"}\r\n            {trade[\"player2cards\"].map((card, cardindex) => (\r\n              <Link\r\n                to={{\r\n                  pathname: `/card/${card.name}`,\r\n                  state: { profilename: username },\r\n                }}\r\n                key={cardindex}\r\n              >\r\n                {\" \"}\r\n                {card.name}{\" \"}\r\n                {cardindex < trade[\"player2cards\"].length - 1 && \",\"}\r\n              </Link>\r\n            ))}\r\n            {/* if I am logged in as John and John \r\n            is the receiver of the trade ie player2, then he \r\n             gets 2 additional buttons, to accept or reject trade */}\r\n            {username === trade.player2 && (\r\n              <Fragment>\r\n                <button onClick={acceptTrade}>Accept Trade!</button>\r\n                <button onClick={rejectTrade}>Reject Trade!</button>\r\n              </Fragment>\r\n            )}\r\n          </span>{\" \"}\r\n          <br></br>\r\n        </div>\r\n      )}\r\n      <Link to={`/profile/${username}`}>return to profile </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Trade);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { getAuth } from \"./Auth\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\"; // to access the profilename that is being passed\r\n// via the link from Profile.js via state\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst Request = (props) => {\r\n  console.log(props);\r\n  console.log(props.location.state);\r\n  const [request, setRequest] = useState();\r\n  const [username] = useState(props.location.state.profilename); //get the username via the link of the request the user has clicked on\r\n  let { _id } = useParams(); //request id\r\n\r\n  const fetchRequest = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVERURL}/request/${_id}`);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      setRequest(json.request);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const acceptFriendRequest = async () => {\r\n    try {\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/acceptfriend/${_id}`, {\r\n        method: \"PUT\",\r\n        headers: headers,\r\n        body: JSON.stringify({}),\r\n      });\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        //if error message exists, meaning players are already friends,display error message\r\n        alert(json.error);\r\n      } else alert(\"friend request accepted !\");\r\n      props.history.push(\"/profile/\" + username);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  const rejectFriendRequest = async () => {\r\n    try {\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/rejectfriend/${_id}`, {\r\n        method: \"DELETE\",\r\n        headers: headers,\r\n      });\r\n      const json = await response.json();\r\n      alert(\"friend request rejected !\");\r\n      props.history.push(\"/profile/\" + username);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRequest(); // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/*conditional rendering: jsx renders before the fetch api completes, so \r\n        we have to tell react to render only this, after the fetch api completes by adding the condition\r\n        that the state variable request exists*/}\r\n      {request && (\r\n        <div>\r\n          <span>\r\n            {\"proposer\"} : {request.proposer}\r\n          </span>\r\n          <br></br>\r\n          <span>\r\n            {\"receiver\"} : {request.receiver}\r\n          </span>{\" \"}\r\n          <br></br>\r\n          {/* if the current user logged in is the receiver, he get 2 more buttons to \r\n          reject or accept the friend request*/}\r\n          {username === request.receiver && (\r\n            <Fragment>\r\n              <button onClick={acceptFriendRequest}>\r\n                Accept Friend Request!\r\n              </button>\r\n              <button onClick={rejectFriendRequest}>\r\n                Reject Friend Request!\r\n              </button>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      )}\r\n      <Link to={`/profile/${username}`}>return to profile </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Request);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\"; // to access the profilename that is being passed\r\nimport Autosuggest from \"react-autosuggest\";\r\n// via the link from Profile.js via state\r\nimport Header from \"./Header\";\r\nimport { getAuth } from \"./Auth\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst SearchFriend = (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const history = useHistory();\r\n  const { user: username } = history.location.state; // get the username from the Button of the logged in user same as getAuth.name\r\n\r\n  const fetchFriends = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVERURL}/profiles`);\r\n      console.log(response);\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      // prof: we don't want the user to add friend to him or herself, extra variable prof\r\n      // to store the profiles\r\n      const prof = json.profiles.filter(\r\n        (profile) => profile.name !== getAuth().name\r\n      );\r\n\r\n      setProfiles(prof);\r\n      // optional code: save the names in a temporary array and set it\r\n      //const names = json.profiles.map((profile) => profile.name);\r\n      //setSuggestions(names); // set the suggestions\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Teach Autosuggest how to calculate suggestions for any given input value.\r\n  const getSuggestions = (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    return inputLength === 0\r\n      ? []\r\n      : profiles.filter(\r\n          (profile) =>\r\n            profile.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n  };\r\n\r\n  // When suggestion is clicked, Autosuggest needs to populate the input\r\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n  // input value for every given suggestion.\r\n  const getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    console.log(\"newValue\", newValue);\r\n    setValue(newValue);\r\n  };\r\n  const sendFriendRequest = async (name) => {\r\n    try {\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/sendfriendrequest`, {\r\n        method: \"POST\",\r\n        headers: headers,\r\n        body: JSON.stringify({ proposer: username, receiver: name }),\r\n      });\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        //if error message exists, meaning players are already friends,display error message\r\n        alert(json.error);\r\n      } else alert(\"friend request sent !\");\r\n      props.history.push(\"/profile/\" + username);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  // conditional rendering inside lambda function\r\n  // const renderSuggestion = (suggestion) =>\r\n  //   getAuth().name != suggestion.name && (\r\n  //     <button onClick={() => sendFriendRequest(suggestion.name)}>\r\n  //       {suggestion.name}\r\n  //     </button>\r\n  //   );\r\n\r\n  const renderSuggestion = (suggestion) => (\r\n    <button onClick={() => sendFriendRequest(suggestion.name)}>\r\n      {suggestion.name}\r\n    </button>\r\n  );\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  const onSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFriends(); // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Autosuggest will pass through all these props to the input.\r\n  const inputProps = {\r\n    placeholder: \"Type your friend's name\",\r\n    value,\r\n    onChange: onChange,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n\r\n      <Link to={`/profile/${username}`}>return to profile </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(SearchFriend);\r\n","import React, { useState, useContext, useEffect, Fragment } from \"react\";\r\nimport { getAuth } from \"./Auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\"; // to access the profilename that is being passed\r\n// via the link from Profile.js via state\r\nimport { GlobalStateContext } from \"./Context\";\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\n\r\nconst MakeTrade = (props) => {\r\n  const context = useContext(GlobalStateContext);\r\n  const [player1] = useState(context.player1.get);\r\n  const [player2] = useState(context.player2.get);\r\n  console.log(context.player1cards.get);\r\n  console.log(context.player2cards.get);\r\n  const [player1cards] = useState(context.player1cards.get);\r\n  const [player2cards] = useState(context.player2cards.get);\r\n  const [player1cardsselected, setPlayer1cardsselected] = useState([]);\r\n  const [player2cardsselected, setPlayer2cardsselected] = useState([]);\r\n\r\n  const [player1cardindexselected, setPlayer1cardindexselected] = useState([]);\r\n  const [player2cardindexselected, setPlayer2cardindexselected] = useState([]);\r\n\r\n  const Player1CardChecked = (card, cardindex, e) => {\r\n    //if the card is checked\r\n    if (e.target.checked) {\r\n      // if the index of the card has not been selected yet, then push the card and index to their arrays\r\n      if (!player1cardindexselected.includes(cardindex)) {\r\n        console.log(e.target.value);\r\n        // add card to the selectedcards array\r\n        let newarray = player1cardsselected;\r\n        newarray.push(card);\r\n        setPlayer1cardsselected(newarray);\r\n        // add the cardindex to player1cardsindexselected\r\n        let newindexarray = player1cardindexselected;\r\n        newindexarray.push(cardindex);\r\n        setPlayer1cardindexselected(newindexarray);\r\n      } // else if the index of the card has been selected already, do nothing here\r\n    } else {\r\n      // if the card is not checked // a card that was checked got unchecked\r\n      console.log(\"unchecking card\");\r\n      if (player1cardindexselected.includes(cardindex)) {\r\n        console.log(\"unchecking selected card\");\r\n        console.log(e.target.value);\r\n        let index = player1cardsselected.indexOf(card);\r\n        // remove the card from player1cardsselected\r\n        let newarray = player1cardsselected;\r\n        newarray.splice(index, 1);\r\n        setPlayer1cardsselected(newarray);\r\n        // remove the index from the index array ie player1cardindexselected\r\n        index = player1cardindexselected.indexOf(cardindex);\r\n        let newindexarray = player1cardindexselected;\r\n        newindexarray.splice(index, 1);\r\n        setPlayer1cardindexselected(newindexarray);\r\n      }\r\n    }\r\n  };\r\n\r\n  // const Player2CardChecked = (card, e) => {\r\n  //   console.dir(e.target.value);\r\n  //   //if the card is checked\r\n  //   if (e.target.checked) {\r\n  //     console.log(\"if\");\r\n  //     // add card to the selectedcards array\r\n  //     let newarray = player2cardsselected;\r\n  //     newarray.push(card);\r\n  //     setPlayer2cardsselected(newarray);\r\n  //   }\r\n  // };\r\n\r\n  const Player2CardChecked = (card, cardindex, e) => {\r\n    //if the card is checked\r\n    if (e.target.checked) {\r\n      // if the index of the card has not been selected yet, then push the card and index to their arrays\r\n      if (!player2cardindexselected.includes(cardindex)) {\r\n        console.log(e.target.value);\r\n        // add card to the selectedcards array\r\n        let newarray = player2cardsselected;\r\n        newarray.push(card);\r\n        setPlayer2cardsselected(newarray);\r\n        // add the cardindex to player1cardsindexselected\r\n        let newindexarray = player2cardindexselected;\r\n        newindexarray.push(cardindex);\r\n        setPlayer2cardindexselected(newindexarray);\r\n      } // else if the index of the card has been selected already, do nothing here\r\n    } else {\r\n      // if the card is not checked // a card that was checked got unchecked\r\n      console.log(\"unchecking card\");\r\n      if (player2cardindexselected.includes(cardindex)) {\r\n        console.log(\"unchecking selected card\");\r\n        console.log(e.target.value);\r\n        let index = player2cardsselected.indexOf(card);\r\n        // remove the card from player1cardsselected\r\n        let newarray = player2cardsselected;\r\n        newarray.splice(index, 1);\r\n        setPlayer2cardsselected(newarray);\r\n        // remove the index from the index array ie player1cardindexselected\r\n        index = player2cardindexselected.indexOf(cardindex);\r\n        let newindexarray = player2cardindexselected;\r\n        newindexarray.splice(index, 1);\r\n        setPlayer2cardindexselected(newindexarray);\r\n      }\r\n    }\r\n  };\r\n\r\n  const makeTrade = async () => {\r\n    try {\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n\r\n      const trade = {\r\n        player1: player1,\r\n        player2: player2,\r\n        player1cards: player1cardsselected,\r\n        player2cards: player2cardsselected,\r\n      };\r\n      // headers.append(\r\n      //   \"Authorization\",\r\n      //   \"Basic \" + base64.encode(email + \":\" + password)\r\n      // );\r\n      const response = await fetch(`${SERVERURL}/maketrade/`, {\r\n        method: \"POST\",\r\n        headers: headers,\r\n        body: JSON.stringify(trade),\r\n      });\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        alert(json.error);\r\n      } else alert(\"Trade Proposed!\");\r\n      props.history.push(\"/profile/\" + player1);\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    //fetchTrade(); // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/*conditional rendering: jsx renders before the fetch api completes, so \r\n        we have to tell react to render only this, after the fetch api completes by adding the condition\r\n        that the state variable trade exists*/}\r\n      <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n        <div style={{ float: \"left\", marginRight: \"50px\" }}>\r\n          {player1} 's cards\r\n          {player1cards.map((card, cardindex) => (\r\n            <div key={cardindex}>\r\n              <label>\r\n                {card.name}\r\n                <input\r\n                  type=\"checkbox\"\r\n                  value={card.name}\r\n                  onChange={(e) => Player1CardChecked(card, cardindex, e)} // need to use arrow function to access this keyword\r\n                />\r\n              </label>\r\n            </div>\r\n          ))}{\" \"}\r\n        </div>\r\n\r\n        <div style={{ float: \"left\" }}>\r\n          {player2} 's cards\r\n          {player2cards.map((card, cardindex) => (\r\n            <div key={cardindex}>\r\n              <label>\r\n                {card.name}\r\n                <input\r\n                  type=\"checkbox\"\r\n                  value={card.name}\r\n                  onChange={(e) => Player2CardChecked(card, cardindex, e)}\r\n                  key={cardindex}\r\n                />\r\n              </label>\r\n            </div>\r\n          ))}\r\n          {player2cardsselected.map((card, index) => (\r\n            <div key={index}> {card.name}</div>\r\n          ))}\r\n        </div>\r\n        <br></br>\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <Link to={`/profile/${player1}`}>return to your profile </Link>\r\n        <button onClick={makeTrade}> Make Trade </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(MakeTrade);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Forbidden() {\r\n  return (\r\n    <>\r\n      <div className=\"bounds\">\r\n        <h1>Forbidden</h1>\r\n        <p>Oh oh! You can't access this page.</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Forbidden;\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Forbidden from \"./Forbidden\";\r\nimport { getAuth } from \"./Auth\";\r\n\r\nconst PrivateRoute = ({ render, ...options }) => {\r\n  console.log(\"PrivateRoute\");\r\n  console.log(getAuth().isAuthenticated);\r\n\r\n  const isAuth = getAuth().isAuthenticated;\r\n  const LastComponent = isAuth ? render : () => <Forbidden />;\r\n  return <Route {...options} render={LastComponent} />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, { useState } from \"react\";\r\nimport { signIn, getAuth } from \"./Auth\";\r\nimport { withRouter } from \"react-router\";\r\nimport Header from \"./Header\";\r\nconst { SERVERURL } = require(\"./Config\");\r\nconsole.log(\"SERVERURL\", SERVERURL);\r\n//console.log(\"TEST\", process.env.REACT_APP_TEST);\r\n\r\nconst Register = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const RegisterUser = async () => {\r\n    try {\r\n      console.log(\"name\");\r\n      console.log(name);\r\n      const user = {\r\n        name: name,\r\n        password: password,\r\n      };\r\n\r\n      let headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n\r\n      const url = `${SERVERURL}/register`;\r\n\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: headers,\r\n        body: JSON.stringify(user),\r\n      });\r\n\r\n      console.log(response);\r\n\r\n      const json = await response.json();\r\n      if (json.error) {\r\n        alert(json.error);\r\n        return;\r\n      }\r\n      signIn(name, password);\r\n      alert(\"registration successful !\");\r\n      props.history.push(\"/profile/\" + name);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const OnNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const OnPasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <form id=\"loginForm\">\r\n        <label for=\"username\">username:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          name=\"username\"\r\n          onChange={OnNameChange}\r\n        />\r\n        <br />\r\n        <label for=\"password\">password:</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          id=\"password\"\r\n          name=\"password\"\r\n          onChange={OnPasswordChange}\r\n        />\r\n        <br />\r\n        <br />\r\n        <input type=\"button\" onClick={RegisterUser} value=\"register\" />\r\n        <br />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Register);\r\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport Logout from \"./Logout\";\r\nimport Profile from \"./Profile\";\r\nimport Card from \"./Card\";\r\nimport Trade from \"./Trade\";\r\nimport Request from \"./Request\";\r\nimport SearchFriend from \"./SearchFriend\";\r\nimport MakeTrade from \"./MakeTrade\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GlobalStateProvider from \"./Context.js\";\r\nimport \"./App.css\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport Register from \"./Register\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalStateProvider>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" render={() => <Login />} />\r\n          <Route exact path=\"/login\" render={() => <Login />} />\r\n          <Route exact path=\"/register\" render={() => <Register />} />\r\n          <Route exact path=\"/logout\" render={() => <Logout />} />\r\n          <PrivateRoute\r\n            exact\r\n            path=\"/profile/:name\"\r\n            render={() => <Profile />}\r\n          />\r\n          <PrivateRoute exact path=\"/card/:cardname\" render={() => <Card />} />\r\n          <PrivateRoute exact path=\"/trade/:_id\" render={() => <Trade />} />\r\n          <PrivateRoute\r\n            exact\r\n            path=\"/maketrade/:name\"\r\n            render={() => <MakeTrade />}\r\n          />\r\n          <PrivateRoute exact path=\"/request/:_id\" render={() => <Request />} />\r\n          <PrivateRoute exact path=\"/search\" render={() => <SearchFriend />} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </GlobalStateProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const dotenv = require(\"dotenv\");\r\ndotenv.config();\r\nmodule.exports = {\r\n  // SERVERURL: process.env.REACT_APP_SERVERURL,\r\n  SERVERURL:\r\n    process.env.NODE_ENV === \"production\" // if running env i snetfli or 8888, bavcken apiu rul is same as website url\r\n      ? \"\"\r\n      : process.env.REACT_APP_SERVERURL, // if you run react using npm start, web site url is 3333, but backend is 8888\r\n};\r\n"],"sourceRoot":""}